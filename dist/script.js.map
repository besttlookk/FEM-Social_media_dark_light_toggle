{"version":3,"sources":["script.js"],"names":["STORAGE_KEY","COLOR_MODE_KEY","checkboxEl","document","getElementById","getCSSCustomProp","propKey","response","getComputedStyle","documentElement","getPropertyValue","length","replace","trim","toggleSetting","currentSetting","localStorage","getItem","setItem","applySetting","passedSetting","setAttribute","checked","handleCheckboxChange","console","log","addEventListener"],"mappings":"AAAA,aAAA,IAAMA,YAAc,oBACdC,eAAiB,eACjBC,WAAaC,SAASC,eAAe,UAIrCC,iBAAmB,SAACC,GACxB,IAAIC,EAAWC,iBAAiBL,SAASM,iBAAiBC,iBACxDJ,GAOF,OAJIC,EAASI,SACXJ,EAAWA,EAASK,QAAQ,MAAO,IAAIC,QAGlCN,GAIHO,cAAgB,WACpB,IAAIC,EAAiBC,aAAaC,QAAQjB,aAE1C,OAAQe,GACN,KAAK,KACHA,EACuC,SAArCV,iBAAiBJ,gBAA6B,QAAU,OAC1D,MACF,IAAK,QACHc,EAAiB,OACjB,MACF,IAAK,OACHA,EAAiB,QAMrB,OAFAC,aAAaE,QAAQlB,YAAae,GAE3BA,GAIHI,aAAe,SAACC,GACpB,IAAIL,EAAiBK,GAAiBJ,aAAaC,QAAQjB,aAEvDe,GACFZ,SAASM,gBAAgBY,aAAa,aAAcN,GAC7B,UAAnBA,EACFb,WAAWoB,SAAU,EACO,SAAnBP,IACTb,WAAWoB,SAAU,KAGvBnB,SAASM,gBAAgBY,aAAa,aAAc,SACpDnB,WAAWoB,SAAU,IAMzB,SAASC,uBACPC,QAAQC,IAAI,mBACZN,aAAaL,iBAJfZ,WAAWwB,iBAAiB,SAAUH,sBAQtCJ","file":"script.js","sourcesContent":["const STORAGE_KEY = \"user-color-scheme\";\nconst COLOR_MODE_KEY = \"--color-mode\"; // COLOR_MODE_KEY is what we use to extract the current CSS Custom Property value, --color-mode\nconst checkboxEl = document.getElementById(\"toggle\");\n\n// document.documentElement selects html element\n//  let’s add a function to extract the --color-mode value:\nconst getCSSCustomProp = (propKey) => {\n  let response = getComputedStyle(document.documentElement).getPropertyValue(\n    propKey\n  );\n\n  if (response.length) {\n    response = response.replace(/\\\"/g, \"\").trim();\n  }\n\n  return response;\n};\n\n//  code that toggles the colour mode:\nconst toggleSetting = () => {\n  let currentSetting = localStorage.getItem(STORAGE_KEY);\n\n  switch (currentSetting) {\n    case null:\n      currentSetting =\n        getCSSCustomProp(COLOR_MODE_KEY) === \"dark\" ? \"light\" : \"dark\";\n      break;\n    case \"light\":\n      currentSetting = \"dark\";\n      break;\n    case \"dark\":\n      currentSetting = \"light\";\n      break;\n  }\n\n  localStorage.setItem(STORAGE_KEY, currentSetting);\n\n  return currentSetting;\n};\n\n//  Next, let’s add a function that applies the user preference that’s either set in local storage or passed in:\nconst applySetting = (passedSetting) => {\n  let currentSetting = passedSetting || localStorage.getItem(STORAGE_KEY);\n\n  if (currentSetting) {\n    document.documentElement.setAttribute(\"data-theme\", currentSetting);\n    if (currentSetting === \"light\") {\n      checkboxEl.checked = false;\n    } else if (currentSetting === \"dark\") {\n      checkboxEl.checked = true;\n    }\n  } else {\n    document.documentElement.setAttribute(\"data-theme\", \"light\");\n    checkboxEl.checked = false;\n  }\n};\n\ncheckboxEl.addEventListener(\"change\", handleCheckboxChange);\n\nfunction handleCheckboxChange() {\n  console.log(\"change happened\");\n  applySetting(toggleSetting());\n}\n\n// We run applySetting() by default to make sure that the user’s preference is applied on page load.\napplySetting();\n"]}